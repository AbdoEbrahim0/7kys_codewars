#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cassert>
#include <string>
#include <algorithm>
#include <cstring>
#include <stdio.h>
#include <regex>
#include <numeric>
#include <stdlib.h>
#include <map>
#include <numeric>
#include<sstream>
#include <set>
#include <cstdint>
#include <array>
#include <utility>
#include <string>
#include <cmath>
#include <vector>
#include <list>
#include<unordered_set>
#include <bitset>
using namespace std;

//methode 1 
//
//vector<vector<long long>> pascal_triangle(int n)
//{
//    /*
//    i=2
//    (1) //push
//    j=0
//    [2-1][j=0] +[2-1][j=1]   = 1 + 1 =(2) //push break 
//    (1) //push
//    -----------
//    i=3
//    //(1) //push
//    j=0
//    //[i-1 =3-1][j=0] +[3-1 = 3-1][j=1]   = 1 + 2 =(3) //push
//    j=1
//    //[i-1 =3-1][j=1] +[3-1 = 3-1][j=2]   = 1 + 2 =(3) //push  break
//    //(1) //push
//    */
//    vector<vector<long long>>my_triangle;
//    for (int i = 0; i <= n; i++)
//    {
//        my_triangle.push_back({ 1 });
//        for (int j = 0; j < i - 1; j++)
//        {
//            my_triangle.at(i).push_back(my_triangle.at(i - 1).at(j) + my_triangle.at(i - 1).at(j + 1));
//        }
//        if (i != 0)
//            my_triangle.at(i).push_back(1);
//    }
//    // print pascal triangel
//    //for (vector <int>val_out : my_triangle)
//    //{
//    //    for (int val : val_out)
//    //    {
//    //        cout << val << " ";
//    //    }
//    //    cout << "\n";
//    //}
//    //cout << "\n----------------------\n";
//    return my_triangle;
//}
//class EasyLine
//{
//public:
//    static long long easyLine(int n)
//    {
//        vector<vector<long long>> triangle = pascal_triangle(n);
//        long long sum = 0; //pass fixed test cases
//         //auto sum = 0; //wrong
//        for (int i = 0; i < triangle.at(n).size(); i++)
//        {
//            sum += (triangle.at(n).at(i) * triangle.at(n).at(i));
//        }
//        //return sum;
//        return round(log(sum));
//
//    };
//};
//

//methode 2
double binomialCoeff(int n, int k) {
    if (k > n - k) k = n - k; // Optimization (C(n, k) == C(n, n-k))

    double logRes = 0;
    for (int i = 0; i < k; i++) {
        logRes += log(n - i) - log(i + 1); // Using logarithm to avoid large values
    }
    return logRes;
}
class EasyLine
{
public:
    static long long easyLine(int n)
    {
        double x = binomialCoeff(2 * n, n);
        return static_cast<long long>(round(x));
    };
};

//methode 3
/*
#include <cmath>
struct EasyLine {
  static long long easyLine( int n ) {
    return lgamma( 2 * n + 1 ) - 2 * lgamma( n + 1 ) + .5;
  }
};
*/
//methode 4
/*
double log_choose(double n, double k) {
  return std::lgamma(n + 1) 
       - std::lgamma(n - k + 1) 
       - std::lgamma(k + 1);
}

class EasyLine
{
public:
    static long long easyLine(int n) {
      return std::round(log_choose(2 * n, n));
    }
};
*/
//methode 5
/*
class EasyLine
{
public:
    static long long easyLine(int n)
    {
        double val = 1;
        for(long long k = 1; k <= n; ++k)
            val += log(n+k) - log(k);

        return (long long) round(val - 1);
    }
};
*/
//methode 6
/*
class EasyLine
{
public:
    static long long easyLine(int n) 
    {
        return (n == 0) ? 1 : round(log(sqrt(2.0 / (2 * M_PI * n)) * pow(2, 2 * n)));
    }
};
*/


//methode 7
/*
class EasyLine
{
public:
    static long long easyLine(int n);
};

long long EasyLine::easyLine(int n)
{
    double sum = 1.0;
    for (int i = 1; i <= n; ++i)
    {
        sum *= (n + i) / static_cast<double>(i);
    }
    return round(log(sum));
}
*/


//methode 8
/*

class EasyLine
{
public:
	static long long easyLine(int n)
	{
		return std::round(std::log(std::tgammal(1 + 2 * n) / std::pow(std::tgammal(1 + n), 2)));
	}
};
*/

//methode 9
/*
class EasyLine
{
public:
	static long long easyLine(int n)
	{
		return std::round(std::log(std::tgammal(1 + 2 * n) / std::pow(std::tgammal(1 + n), 2)));
	}
};
*/
//methode 10
/*
class EasyLine
{
public:
	static long long easyLine(int n) {
		double res = 1;
		double num = (double)(n << 1);
		double koef = (double)n;
		for (size_t i = 0; i < n; ++i)
		{
			res *= num / koef;
			--num;
			--koef;
		}
		return round(log(res));
	}
};
*/
int main() {
    //pascal_triangle(7);
    EasyLine obj;
    //on return                             sum     round(sumLog)
        cout << obj.easyLine(0)<< "\n";     //1     0
        cout << obj.easyLine(1) << "\n";    //2     1
        cout << obj.easyLine(2) << "\n";    //6     2
        cout<< obj.easyLine(3)<<"\n";       //20    3
        cout << obj.easyLine(4) << "\n";    //70    4
        cout << obj.easyLine(7) << "\n";    //3432  8
cout << obj.easyLine(50) << "\n";   //expected: 100891344545564193334812497256 actual: 1184508333840160104  // expected : 67  actual :42 or get negative num
    return 0;
}
