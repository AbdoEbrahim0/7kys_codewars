#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cassert>
#include <algorithm>
#include <cstring>
#include <stdio.h>
#include <regex>
#include <numeric>
#include <stdlib.h>
#include <numeric>
#include<sstream>
#include <cstdint>
#include <array>
#include <utility>
#include <list>
#include<unordered_set>
#include <bitset>
#include <string>
#include <cmath>
#include <vector>
#include <map>
#include <set>
using namespace std;

//methode 1 complexty : O()
//bool shared_bits(long a, long b) {
//    string s1 = "",s2="";
//    while (a !=0)
//    {
//    if (a % 2 == 0) s1 += '0';
//    else s1 += '1';
//    a = a / 2 ;
//    }
//    
//    while (b != 0)
//    {
//        if (b % 2 == 0) s2 += '0';
//        else s2 += '1';
//        b = b / 2;
//    }
//    /*cout << s1 << "\n";
//    cout << s2 << "\n";
//    */
//    int count = 0;
//    int size;
//    if (s1.size() < s2.size()) size = s1.size();
//    else size = s2.size();
//    for (int i = 0; i < size; i++)
//    {
//        if (s1[i] == '1' && s2[i] == '1')
//        {
//            count++;
//            if (count == 2) return true;
//        }
//    }
//        return false;
//}
// 
// 
//bool shared_bits(long a, long b) {
//    bitset<32> c = a & b;
//    cout << c;
//    return c.count() >= 2;
//
//}
//bool shared_bits(long a, long b) {
//    long c = a & b;
//    long c_and_1= c & 1;
//    while (c && !(c_and_1))
//        c >>= 1;
//    return c >> 1;
//}
//
//bool shared_bits(long a, long b) {
//    int c = a & b;
//    int ones = 0;
//    while (c) {
//        ones += c & 1;
//        c >>= 1;
//    }
//    return ones >= 2 ? true : false;
//}
//
//bool shared_bits(long a, long b)
//{
//
//    int temp = a & b, count = 0;
//    while (temp)
//    {
//        count += temp & 1;
//        temp >>= 1;
//    }
//    return count > 1 ? true : false;
//}
          // methode 1 O(N)
//bool any_odd(unsigned x) {
//    int idx = 0;
//    while (x != 0)
//    {
//        if (idx % 2 != 0) //any oddd bit if 1 return true 
//        {
//            if (x % 2 == 1)
//                return true;
//        }
//        idx++;;
//        x = x / 2;
//    }
//    return false;
//}
        // methode 2 O(1)
//int any_odd(unsigned x) {
//    auto d = 0xAAAAAAAA;
//    return ((x & 0xAAAAAAAA) ==x) ? 1 : 0;
//}
        // methode 3 O(N)
//int any_odd(unsigned x) {
//    std::string str = std::bitset<std::numeric_limits<unsigned>::digits>(x).to_string();
//
//    for (int i = str.size() - 1; i >= 0; i--)
//    {
//        if ((str.size() - 1 - i) % 2 == 1 && str[i] == '1')
//            return 1;
//    }
//    return 0;
//}
        // methode 4 O(1)
//methode 1 

//methode 1 
//std::vector<int> d = { 17, 17, 15, 14, 8, 7, 7, 5, 4, 4, 1 };//size=11   11/2=ceil (5.5)=6
//std::vector<int> sol = { 17, 15, 8, 7, 4, 1, 4, 5, 7, 14, 17 };
//d = { 20, 7, 6, 2 }; //size=4   4/2=2
//sol = { 20, 6, 2, 7 };
class Valley
{
public:
    static std::vector<int> makeValley(std::vector<int>& arr)
    {
        vector<int>vec;
        int sizeArr = arr.size(), right_wing_start;
        if (sizeArr % 2 != 0) {
            sizeArr++;
            right_wing_start = sizeArr - 2 - 1; }
        else//even
            right_wing_start = sizeArr - 1;

        for (int i = 0; i < sizeArr; i += 2)
            vec.emplace_back(arr.at(i));
        
        for (int j = right_wing_start; j >=1 ; j -= 2)
            vec.emplace_back(arr.at(j));
        
        return vec;
    };
};

int main() {
    Valley obj;
    vector<int >v = { 17, 17, 15, 14, 8, 7, 7, 5, 4, 4, 1 };
    obj.makeValley(v);
    /*vector<int >v = { 20, 7, 6, 2 };
    obj.makeValley(v);*/
    //cout << shared_bits(10, 7)<<"\n";
    // cout << shared_bits(10, 15)<<"\n";
    // cout << shared_bits(10, 14)<<"\n";
    //cout << shared_bits(10, 7)<<"\n";
    //cout << shared_bits(15, 1) << "\n";   
    return 0;
}
