#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cassert>
#include <algorithm>
#include <cstring>
#include <stdio.h>
#include <regex>
#include <numeric>
#include <stdlib.h>
#include <numeric>
#include<sstream>
#include <cstdint>
#include <array>
#include <utility>
#include <list>
#include<unordered_set>
#include <bitset>
#include <string>
#include <cmath>
#include <vector>
#include <map>
#include <set>
using namespace std;


//methode 1 
//std::vector<int> d = { 17, 17, 15, 14, 8, 7, 7, 5, 4, 4, 1 };//size=11   11/2=ceil (5.5)=6
//std::vector<int> sol = { 17, 15, 8, 7, 4, 1, 4, 5, 7, 14, 17 };
//d = { 20, 7, 6, 2 }; //size=4   4/2=2
//sol = { 20, 6, 2, 7 };
//class Valley
//{
//public:
//    static std::vector<int> makeValley(std::vector<int>& arr)
//    {
//        
//        //sort(arr.begin(), arr.end());//nlogn
//        //reverse(arr.begin(), arr.end());//o(n)
//        std::sort(arr.begin(), arr.end(), std::greater<int>()); //instead of sort & reverse
//        vector<int>vec;
//        int sizeArr = arr.size(), right_wing_start;
//        if (sizeArr % 2 != 0) {
//            sizeArr++;
//            right_wing_start = sizeArr - 2 - 1;
//        }
//        else//even
//            right_wing_start = sizeArr - 1;
//
//        for (int i = 0; i < sizeArr; i += 2)//O(n/2)
//            vec.emplace_back(arr.at(i));
//
//        for (int j = right_wing_start; j >= 1; j -= 2)//O(n/2)
//            vec.emplace_back(arr.at(j));
//
//        return vec;
//    };
//};
//methode 2 
class Valley
{
public:
    static std::vector<int> makeValley(std::vector<int>& arr);
};
//
//std::vector<int> Valley::makeValley(std::vector<int>& arr)
//{
//    std::sort(arr.begin(), arr.end());
//    std::vector<int> ans(arr.size());
//    for (unsigned int i = 0; i < arr.size(); i++)
//    {
//        
//        if (i % 2 == 0)
//        {
//            ans[i / 2] = arr[arr.size() - 1 - i];
//        }
//        else
//        {
//            ans[arr.size() - 1 - i / 2] = arr[arr.size() - 1 - i];
//        }
//    }
//    return ans;
//}
//methode 3 edited methode 2 (optimized)
//std::vector<int> Valley::makeValley(std::vector<int>& arr)
//{
//    std::sort(arr.begin(), arr.end(),greater<int>()); //descending sort becuase greater
//    std::vector<int> ans(arr.size());
//    // for performance issue simply use pointer instead of indcies calculasions
//    int left = 0, right = arr.size() - 1;
//    for (unsigned int i = 0; i < arr.size(); i++)
//    {
//        if (i % 2 == 0)
//        {
//            ans[left++] = arr[i];
//        }
//        else
//        {
//            ans[right--] = arr[i];
//        }
//    }
//    return ans;
//}
//methode 4 optimized of methed 3 Uses the input array (arr) directly instead of creating a new one.
std::vector<int> Valley::makeValley(std::vector<int>& arr)
{
    std::sort(arr.begin(), arr.end(), std::greater<int>()); // Sort descending

    int left = 0, right = arr.size() - 1;
    //methode 1 iterate over all n to check if odd or not
    //for (int i = 0; i < arr.size(); i++) {
    //    if (i % 2 == 1) 
    //        std::swap(arr[i], arr[right--]); // Move smaller elements to the right wing
    //methode 2 iterate over all n/2  
    for (int i = 1; i < right; i+=2) 
            std::swap(arr[i], arr[right--]); // Move smaller elements to the right wing

}
//methode 5 worst case O(N^2)
//methode 3
//struct Valley {
//    static std::vector< int > makeValley(std::vector< int >& v) {
//        auto l{ v.begin() }, r{ v.end() };
//        while (r - l > 1)
//            std::swap(*max_element(l, r), *l++),
//            std::swap(*max_element(l, r), *--r);
//        return v;
//    }
//};
int main() {
    Valley obj;
    vector<int >v = { 17, 17, 15, 14, 8, 7, 7, 5, 4, 4, 1 };
    obj.makeValley(v);
    /*vector<int >v = { 1824, 1664, 1404, 1256, 1101, 920, 564, 193, 65, 132, 224, 875, 930, 1198, 1310, 1570, 1809 };
    obj.makeValley(v);*/
    /*vector<int >v = { 20, 7, 6, 2 };
    obj.makeValley(v);*/
    return 0;
}
