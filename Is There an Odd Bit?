          // methode 1 O(N)
//bool any_odd(unsigned x) {
//    int idx = 0;
//    while (x != 0)
//    {
//        if (idx % 2 != 0) //any oddd bit if 1 return true 
//        {
//            if (x % 2 == 1)
//                return true;
//        }
//        idx++;;
//        x = x / 2;
//    }
//    return false;
//}
        // methode 2 O(1)
//int any_odd(unsigned x) {
//    auto d = 0xAAAAAAAA;
//    return ((x & 0xAAAAAAAA) ==x) ? 1 : 0;
//}
        // methode 3 O(N)
//int any_odd(unsigned x) {
//    std::string str = std::bitset<std::numeric_limits<unsigned>::digits>(x).to_string();
//
//    for (int i = str.size() - 1; i >= 0; i--)
//    {
//        if ((str.size() - 1 - i) % 2 == 1 && str[i] == '1')
//            return 1;
//    }
//    return 0;
//}
        // methode 4 O(1)
bool any_odd(unsigned x)
{
    std::bitset<32> doubleNumber(x);
    for (int i = 1; i < 32; i += 2)
    {
        if (doubleNumber[i]) return true;
    }
    return false;
}
int main() {
    cout<<any_odd(128);
    return 0;
}
