#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cassert>
#include <algorithm>
#include <cstring>
#include <stdio.h>
#include <regex>
#include <numeric>
#include <stdlib.h>
#include <numeric>
#include<sstream>
#include <cstdint>
#include <array>
#include <utility>
#include <list>
#include<unordered_set>
#include <bitset>
#include <string>
#include <cmath>
#include <vector>
#include <map>
#include <set>
using namespace std;

//methode 1 complexty : O()
//bool shared_bits(long a, long b) {
//    string s1 = "",s2="";
//    while (a !=0)
//    {
//    if (a % 2 == 0) s1 += '0';
//    else s1 += '1';
//    a = a / 2 ;
//    }
//    
//    while (b != 0)
//    {
//        if (b % 2 == 0) s2 += '0';
//        else s2 += '1';
//        b = b / 2;
//    }
//    int count = 0;
//    int size;
//    if (s1.size() < s2.size()) size = s1.size();
//    else size = s2.size();
//    for (int i = 0; i < size; i++)
//    {
//        if (s1[i] == '1' && s2[i] == '1')
//        {
//            count++;
//            if (count == 2) return true;
//        }
//    }
//        return false;
//}
//  methode 2
//bool shared_bits(long a, long b) {
//    char ch1 , ch2;
//    int count = 0;
//    while (a != 0)
//    {
//        if (a % 2 == 0) ch1 = '0';
//        else ch1= '1';
//        a = a / 2;
//        if (b != 0)
//        {
//            if (b % 2 == 0) ch2 = '0';
//            else ch2 = '1';
//            b = b / 2;
//        }
//        else ch2 = '0';
//        if (ch1 == '1' && ch2 == '1')
//        {
//            count++;
//            if (count == 2) return true;
//        }
//    }
//    return false;
//}
// 
//a = 10 (Binary: 1010)
//b = 14 (Binary: 1110)
// 
        //  methode 3
//bool shared_bits(long a, long b) {
//    int count = 0;
//    while (a > 0 && b > 0) {  // Loop until both numbers become zero
//        if ((a & 1) && (b & 1)) {  // Check if both numbers have 1 in the same bit position
//            count++;
//            if (count == 2) return true;
//        }
//        a >>= 1; // Right shift a (divide by 2)
//        b >>= 1; // Right shift b (divide by 2)
//    }
//    return false;
//}
        //  methode 3 optimized
//bool shared_bits(long a, long b) {
//    bitset<32> c = a & b;
//    cout << c;
//    return c.count() >= 2;
//
//}
        //  methode 4 
//bool shared_bits(long a, long b) {  // note fail in random test case
//    long c = a & b; //a = 10 (Binary: 1010) //b = 14 (Binary: 1110) c =1010 
//    long c_and_1= c & 1; // 1010 & 1 = 1010
//    while (c && !(c_and_1))
//        c >>= 1;
//    return c >> 1;
//}
        //  methode 5 
bool shared_bits(long a, long b) {
    int c = a & b;
    int ones = 0;
    while (c) {
        ones += c & 1; // 7 &1 0111 &1= 1  /// 3 &1 0011 &1= 1  // 1 &1 0001 &1= 1  // 0 &1 0000 &1= 0
        c >>= 1;
    }
    return ones >= 2 ? true : false;
}
        //  methode 6 Kernighan's Algorithm (Efficient Counting) 
bool shared_bits(long a, long b) {
    int count = 0;
    long common = a & b; // Get only the common set bits

    while (common) {
        count++;
        if (count == 2) return true;
        common &= (common - 1);  // Drop the lowest set bit
    }
    return false;
}

int main() {
    
    //cout << shared_bits(10, 14)<<"\n";
    //cout << shared_bits(10, 7) << "\n";
    // cout << shared_bits(10, 15)<<"\n";
    // cout << shared_bits(10, 14)<<"\n";
     cout << shared_bits(15, 7) << "\n";
    
    cout << shared_bits(15, 1) << "\n";   
    return 0;
}
