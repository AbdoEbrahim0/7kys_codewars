#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cassert>
#include <string>
#include <algorithm>
#include <cstring>
#include <stdio.h>
#include <vector>
#include <regex>
#include <string>
#include <numeric>
#include <stdlib.h>
#include <map>
#include <numeric>
#include<sstream>
#include <set>
#include <cstdint>
#include <array>
using namespace std;
//{{3, 2, 1, 0}, {4, 6, 5, 3, 2}, {9, 8, 7, 4}}   1+6 +9 =16
//{{3, 2, 1, 0}, {4, 6, 5, 3, 2}, {9, 8, 7, 4}}

        //method 1:
//long elementsSum(const std::vector<std::vector<int>>& arr, int d = 0) {
//    int sum = 0;
//    int two = arr.size() - 1;
//    for (vector<int> val : arr)
//    {
//        if (two < val.size())
//        {
//            sum += val.at(two);
//            two--;
//        }
//        else
//        {
//            sum += d;
//            two--;
//        }
//
//    }
//    return sum ;
//}

// methode 2


//long elementsSum(const std::vector<std::vector<int>>& arr, int d = 0) {
//    long sum = 0;
//    int size= arr.size();
//    vector<long> my_indcies;
//   
//    for (int i = size - 1; i >= 0; i--)
//    {
//        my_indcies.push_back( i);
//    }
//    int ind = 0;
//    //{ {3, 2, 1, 0}, {4, 6, 5, 3, 2}, {9, 8, 7, 4} };
//    int i = 0;
//    for (vector<int> val : arr)
//    {
//        ind = my_indcies.at(i);
//        if (ind< val.size())
//        {  
//            sum += val.at(ind);
//            i++;
//        }
//        else
//        {
//            sum += d;
//            i++;
//        }        
//    }
//    return sum;
//}
//methode 3:
//long elementsSum(const std::vector<std::vector<int>>& arr, int d = 0) {
//    int r = 0, a = 0;
//    for (size_t i = arr.size(); i > 0; i--, a++)
//        arr[a].size() < i ? r += d : r += arr[a][i - 1];
//    return r;
//}
//methode 4:
long elementsSum(const std::vector<std::vector<int>>& arr, int d = 0) {
    long sum = 0;
    unsigned long len = arr.size();
    for (size_t i = 0; i < arr.size(); i++) {
        long num = arr[i].size() < len - i ? d : arr[i][len - i - 1];
        sum += num;
    }

    return sum;
}
int main() {
    //vector< vector <int>> vec{ {3, 2, 1, 0}, {4, 6, 5, 3, 2}, {9, 8, 7, 4} };
    
    //vector< vector <int>> vec{ {3, 2}, {4}, {} };// 0+0+0=0
    vector< vector <int>> vec{ {3}, {4, 6, 5, 3, 2}, {9, 8, 7, 4} };// 0+6+9=15
    cout << elementsSum(vec);
        return 0;
}
