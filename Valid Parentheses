#include <cmath>
#include <regex>
#include <string>

using namespace std;
    //methode 1 : this methode has problem in random large test case
bool validParentheses(const std::string& str) {
    int open = 0, close = 0; int openIsPostive_closeIsNegative=0;
    int sizeOfInput = str.size();
    if (sizeOfInput &1 ==1 )
    return false;
    else
    {
        for (char c : str)
        {
            if (c == '(') { open++;  }
            else if (c == ')') { close++; }
        }
    }
    if (open == close) //if even  ()() return true if not return false 
    {
        for (int i=0;i< sizeOfInput;i++)
        {
            // )(())) consider open Parentheses as postive increament and close as negative increament 
            //it only will be true if sum was postive before reach last element and false if sum was negative
            if (openIsPostive_closeIsNegative < 0)
            { return false; }
            if (str[i] == '(') openIsPostive_closeIsNegative++;
            else if (str[i] == ')') openIsPostive_closeIsNegative--;
            
        }
        return true;
    }
    return false;
}

// methode 2
bool validParentheses(const std::string& str) {
    int openIsPostive_closeIsNegative = 0;
    int sizeOfInput = str.size();
    if (sizeOfInput & 1 == 1) // if odd ofcourse it will be false 
        return false;
    else
    {
        for (char c : str)
        {
            if (c == '(') { openIsPostive_closeIsNegative++; }
            else if (c == ')') { openIsPostive_closeIsNegative--; }
        if (openIsPostive_closeIsNegative < 0 )
            return false;
        } 
    }
  //in case of '((' or '))'
      if (openIsPostive_closeIsNegative < 0 || openIsPostive_closeIsNegative >1 ) 
        {
            return false;
        }
    return true;
}
//methode 3
bool validParentheses(const string& str) {
  int result = 0;
  
  for (char ch : str)
  {
    if (ch == '(')
    {
      result++;
    }
    else
    {
      result--;
    }
    if (result < 0) return false;
  }
  
  return !result; // 0 => False !0 => True
}
//methode 5
bool validParentheses(const std::string& str) {
  try {
    return std::regex{str}, true;
  } catch (std::regex_error) {
    return false;
  }
}
//methode 5
bool validParentheses(const std::string& str) {
  int Open=0; int Close=0;
  for(int x=0;x<str.size();x++)
    {
    if(str[x]=='(') Open ++;
      
    if(str[x]==')') Close ++;

    if(Close>Open) return false;
    
    if(x==str.size()-1)
     if(Open==Close) return true;
      else return false;
    }
  return true;
}
int main() {

    cout<< validParentheses("((()))");
    cout << validParentheses(")(()))");

    
    return 0;
}
